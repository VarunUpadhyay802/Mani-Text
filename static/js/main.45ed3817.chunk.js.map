{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","Components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","role","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","style","color","heading","value","onChange","event","target","rows","backgroundColor","newText","toUpperCase","showAlert","toLowerCase","input","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Math","floor","defaultProps","Alert","setTimeout","alert","slice","msg","App","setMode","_useState3","_useState4","setAlert","body","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"mMAGe,SAASA,EAAOC,GAO7B,OACEC,IAAAC,cAAA,WACED,IAAAC,cAAA,OACEC,UAAS,kCAAAC,OAAoCJ,EAAMK,KAAI,QAAAD,OAAOJ,EAAMK,KAAI,MAExEJ,IAAAC,cAAA,OAAKC,UAAU,mBACbF,IAAAC,cAAA,KAAGC,UAAU,eAAeG,KAAK,KAC9BN,EAAMO,OAETN,IAAAC,cAAA,UACEC,UAAU,iBACVK,KAAK,SACLC,iBAAe,WACfC,iBAAe,0BACfC,gBAAc,yBACdC,gBAAc,QACdC,aAAW,qBAEXZ,IAAAC,cAAA,QAAMC,UAAU,yBAElBF,IAAAC,cAAA,OAAKC,UAAU,2BAA2BW,GAAG,0BAC3Cb,IAAAC,cAAA,MAAIC,UAAU,mCACZF,IAAAC,cAAA,MAAIC,UAAU,YACZF,IAAAC,cAAA,KAAGC,UAAU,kBAAkBY,eAAa,OAAOT,KAAK,KAAI,SAI9DL,IAAAC,cAAA,MAAIC,UAAU,YACZF,IAAAC,cAAA,KAAGC,UAAU,WAAWG,KAAK,KAC1BN,EAAMgB,aAIbf,IAAAC,cAAA,QAAMC,UAAU,SAASc,KAAK,aAalChB,IAAAC,cAAA,OAAKC,UAAS,+BAAAC,OAA8C,UAAbJ,EAAMK,KAAe,OAAO,UAC3DJ,IAAAC,cAAA,SAAOC,UAAU,mBAAmBe,QAASlB,EAAMmB,WAAYX,KAAK,WAAWM,GAAG,2BAClFb,IAAAC,cAAA,SAAOC,UAAU,mBAAmBiB,QAAQ,0BAAyB,sBCxD9E,SAASC,EAASrB,GAAO,IAAAsB,EACdC,mBAAS,IAAGC,EAAAC,YAAAH,EAAA,GAA7BI,EAAIF,EAAA,GAAEG,EAAOH,EAAA,GAsCpB,OACEvB,IAAAC,cAAA,WACED,IAAAC,cAAA,OACEC,UAAU,YACVyB,MAAO,CACLC,MAAsB,SAAf7B,EAAMK,KAAkB,QAAU,UAG3CJ,IAAAC,cAAA,OAAKC,UAAU,UACbF,IAAAC,cAAA,MAAI0B,MAAO,CAAEC,MAAqB,UAAf7B,EAAMK,KAAmB,QAAU,UAAYL,EAAM8B,SACxE7B,IAAAC,cAAA,YACEC,UAAU,eACV4B,MAAOL,EACPM,SA9Ba,SAACC,GAEtBN,EAAQM,EAAMC,OAAOH,QA6BbjB,GAAG,OACHqB,KAAK,IACLP,MAAO,CACLQ,gBAAgC,SAAfpC,EAAMK,KAAkB,QAAU,WAGvDJ,IAAAC,cAAA,YACAD,IAAAC,cAAA,UAAQC,UAAU,sBAAsBe,QAzD1B,WAEpB,IAAImB,EAAUX,EAAKY,cACnBX,EAAQU,GACRrC,EAAMuC,UACJ,iDACA,aAmDoE,uBAGhEtC,IAAAC,cAAA,UACEC,UAAU,2BACVe,QArDc,WAEtB,IAAImB,EAAUX,EAAKc,cACnBb,EAAQU,KAmDD,sBAGDpC,IAAAC,cAAA,UACEC,UAAU,2BACVe,QAtDe,WAGvBS,EADc,MAqDP,cAGD1B,IAAAC,cAAA,UACEC,UAAU,2BACVe,QAnDc,WACtB,IAAIuB,EAAQC,SAASC,eAAe,QACpCF,EAAMG,SACNC,UAAUC,UAAUC,UAAUN,EAAMV,OACpC/B,EAAMuC,UACJ,cACA,aA8CK,aAGDtC,IAAAC,cAAA,UACEC,UAAU,2BACVe,QAhDgB,WACxB,IAAImB,EAAUX,EAAKsB,MAAM,QACzBrB,EAAQU,EAAQY,KAAK,QA+Cd,yBAKLhD,IAAAC,cAAA,OAAKC,UAAU,iBAAiByB,MAAO,CAAEC,MAAqB,UAAf7B,EAAMK,KAAmB,QAAU,UAAW,cAC/EqB,EAAKwB,OAAO,IAACjD,IAAAC,cAAA,WAAK,SACvBwB,EAAKsB,MAAM,KAAKE,OAAS,EAChCjD,IAAAC,cAAA,WACwE,6BAEvEiD,KAAKC,MAAM,KAAO1B,EAAKsB,MAAM,KAAKE,OAAS,GAAG,GAAG,QAEpDjD,IAAAC,cAAA,OAAKC,UAAU,YAAYyB,MAAO,CAAEC,MAAqB,UAAf7B,EAAMK,KAAmB,QAAU,UAAYL,EAAM8B,QAAQ,IAExG7B,IAAAC,cAAA,UAAI,WACHD,IAAAC,cAAA,WACCwB,EAAKwB,OAAS,EACXxB,EACA,sDDrCV3B,EAAOsD,aAAe,CACpB9C,MAAO,iBACPS,UAAW,UElDEsC,MAlBf,SAAetD,GAEb,OADAuD,WAAW,aAAU,KAEnBvD,EAAMwD,OACJvD,IAAAC,cAAA,OACEC,UAAS,eAAAC,OAAiBJ,EAAMwD,MAAMhD,KAAI,gCAC1CS,KAAK,SAELhB,IAAAC,cAAA,cACGF,EAAMwD,MAAMhD,KAAKiD,MAAM,EAAG,GAAGnB,cAC5BtC,EAAMwD,MAAMhD,KAAKiD,MAAM,EAAGzD,EAAMwD,MAAMhD,KAAK0C,QAAQV,eAC7C,IAAI,IACZxC,EAAMwD,MAAME,MCwCPC,MA/Cf,WAAe,IAAArC,EACWC,mBAAS,SAAQC,EAAAC,YAAAH,EAAA,GAAlCjB,EAAImB,EAAA,GAAEoC,EAAOpC,EAAA,GAAuBqC,EACjBtC,mBAAS,MAAKuC,EAAArC,YAAAoC,EAAA,GAAjCL,EAAKM,EAAA,GAAEC,EAAQD,EAAA,GAMhBvB,EAAY,SAACmB,EAAKlD,GACtBuD,EAAS,CACPL,IAAKA,EACLlD,KAAMA,IAER+C,WAAW,WACTQ,EAAS,OACR,MAEC5C,EAAa,WACJ,UAATd,GACFuD,EAAQ,QACRlB,SAASsB,KAAKpC,MAAMQ,gBAAkB,UACtCG,EAAU,6BAA8B,WACxCG,SAASnC,MAAQ,yBAGjBqD,EAAQ,SACRlB,SAASsB,KAAKpC,MAAMQ,gBAAkB,QACtCG,EAAU,8BAA+B,aAG7C,OACEtC,IAAAC,cAAA,WACED,IAAAC,cAACH,EAAM,CAACQ,MAAO,aAAcF,KAAMA,EAAMc,WAAYA,IACrDlB,IAAAC,cAACoD,EAAK,CAACE,MAAOA,IACdvD,IAAAC,cAAA,OAAKC,UAAU,aAEbF,IAAAC,cAACmB,EAAQ,CACCS,QAAS,4BACTzB,KAAMA,EACNc,WAAYA,EACZoB,UAAWA,OCnCd0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,UAAqBD,KAAK,SAAAE,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAOV,GACPW,EAAQX,MCDDY,IAASC,WAAWrC,SAASC,eAAe,SACpDqC,OACH/E,IAAAC,cAACD,IAAMgF,WAAU,KACfhF,IAAAC,cAACyD,EAAG,QAORM","file":"static/js/main.45ed3817.chunk.js","sourcesContent":["import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n// import Link from \"react-router-dom  \";\r\nexport default function Navbar(props) {\r\n  // if (darkMode=false) {\r\n  //     mode=darkMode;\r\n\r\n  // } else {\r\n\r\n  // }\r\n  return (\r\n    <div>\r\n      <nav\r\n        className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}\r\n      >\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n            <span className=\"navbar-toggler-icon\"></span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">\r\n                  {props.aboutText}\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <form className=\"d-flex\" role=\"search\">\r\n              {/* <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              /> */}\r\n              {/* <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button> */}\r\n            </form>\r\n          </div>\r\n        </div>\r\n        <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable DarkMode</label>\r\n                    </div>\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  aboutText: PropTypes.string,\r\n};\r\nNavbar.defaultProps = {\r\n  title: \"set title here\",\r\n  aboutText: \"About \",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleUpClick = () => {\r\n    // console.log(\"clicked\");\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\r\n      \"ALl the txt have been changed to the uppercase\",\r\n      \"Success\"\r\n    );\r\n  };\r\n  const handleDownClick = () => {\r\n    // console.log(\"clicked\");\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n  };\r\n  const handleClearClick = () => {\r\n    // console.log(\"clicked\");\r\n    let newText = \"\";\r\n    setText(newText);\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"OnChange\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleCopyClick = () => {\r\n    var input = document.getElementById(\"body\");\r\n    input.select();\r\n    navigator.clipboard.writeText(input.value);\r\n    props.showAlert(\r\n      \"Text Copied\",\r\n      \"Success\"\r\n    );\r\n  };\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n  };\r\n  return (\r\n    <div>\r\n      <div\r\n        className=\"container\"\r\n        style={{\r\n          color: props.mode === \"dark\" ? \"light\" : \"white\",\r\n        }}\r\n      >\r\n        <div className=\"mb-3  \">\r\n          <h1 style={{ color:props.mode === \"light\" ? \"black\" : \"white\" }}>{props.heading}</h1>\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"body\"\r\n            rows=\"9\"\r\n            style={{\r\n              backgroundColor: props.mode === \"dark\" ? \"grey \" : \"white\",\r\n            }}\r\n          ></textarea>\r\n          <div />\r\n          <button className=\"btn btn btn-primary\" onClick={handleUpClick}>\r\n            Conver to UpperCase\r\n          </button>\r\n          <button\r\n            className=\"btn btn btn-primary mx-3\"\r\n            onClick={handleDownClick}\r\n          >\r\n            Conver to Downcase\r\n          </button>\r\n          <button\r\n            className=\"btn btn btn-primary mx-3\"\r\n            onClick={handleClearClick}\r\n          >\r\n            Clear Text\r\n          </button>\r\n          <button\r\n            className=\"btn btn btn-primary mx-3\"\r\n            onClick={handleCopyClick}\r\n          >\r\n            Copy Text\r\n          </button>\r\n          <button\r\n            className=\"btn btn btn-primary mx-3\"\r\n            onClick={handleExtraSpaces}\r\n          >\r\n            Remove Extra Spaces\r\n          </button>\r\n        </div>\r\n      </div>\r\n      <div className=\"container my-3\" style={{ color:props.mode === \"light\" ? \"black\" : \"white\" }}>\r\n        characters:{text.length} <br/>\r\n        Words:{text.split(\" \").length - 1}\r\n        <br />\r\n        {/* according to the data , that if you read 125 word in 30 seconds  */}\r\n        Avg time to read the Text:\r\n        {Math.floor(1.24 * text.split(\" \").length - 1)/60+\"mins\"}\r\n      </div>\r\n      <div className=\"container\" style={{ color:props.mode === \"light\" ? \"black\" : \"white\" }}>{props.heading}>\r\n            \r\n     <h3>Preview</h3>\r\n      <br />\r\n      {text.length > 0\r\n        ? text\r\n        : \"Enter something in the textbox to preview it here\"}  \r\n      </div>\r\n   </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  setTimeout(() => {}, 2000);\r\n  return (\r\n    props.alert && (\r\n      <div\r\n        className={`alert alert-${props.alert.type} alert-dismissible fade show`}\r\n        role=\"alert\"\r\n      >\r\n        <strong>\r\n          {props.alert.type.slice(0, 1).toUpperCase() +\r\n            props.alert.type.slice(1, props.alert.type.length).toLowerCase()}\r\n        </strong>{\" \"}\r\n        :{props.alert.msg}\r\n      </div>\r\n    )\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import \"./App.css\";\nimport Navbar from \"./Components/Navbar\";\nimport React,{ useState } from \"react\";\nimport TextForm from \"./Components/TextForm\";\nimport Alert from \"./Components/Alert\";\nimport About from \"./Components/About\";\n// import { BrowserRouter, Routes, Route } from \"react-router-dom\";\nfunction App() {\n  const [mode, setMode] = useState(\"light\"); //it will tell whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null); //we are not naming below funcion to be set alert because that\n  // below functio we are using for another purpose, that show alert we are using for type and message so that\n  // through bootstarp we can get different different alert and set alert we are using only to set the alert variablr\n  //jab bhi set aata hai,means const alert , set vala set, In starting we use round brackets then inside if we want to use it for\n  // object then we can do so by curly\n  //so first alert was null, and now it is a object which is of type and msg\n  const showAlert = (msg, type) => {\n    setAlert({\n      msg: msg,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 3000);\n  };\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#0d1117\";\n      showAlert(\"Dark Mode has Been Enabled\", \"success\");\n      document.title = \"Mani-text: Dark Mode\";\n      \n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light Mode has Been Enabled\", \"success\");\n    }\n  };\n  return (\n    <div>\n      <Navbar title={\"texttutils\"} mode={mode} toggleMode={toggleMode} />\n      <Alert alert={alert} />\n      <div className=\"container\">\n        \n        <TextForm \n                  heading={\"Enter the text to analyze\"}\n                  mode={mode}\n                  toggleMode={toggleMode}\n                  showAlert={showAlert}\n                />\n      </div>\n      </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}